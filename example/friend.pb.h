// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: friend.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_friend_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_friend_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_friend_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_friend_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_friend_2eproto;
namespace friendrpc {
class ErrType;
struct ErrTypeDefaultTypeInternal;
extern ErrTypeDefaultTypeInternal _ErrType_default_instance_;
class FriendListReq;
struct FriendListReqDefaultTypeInternal;
extern FriendListReqDefaultTypeInternal _FriendListReq_default_instance_;
class FriendListRes;
struct FriendListResDefaultTypeInternal;
extern FriendListResDefaultTypeInternal _FriendListRes_default_instance_;
}  // namespace friendrpc
PROTOBUF_NAMESPACE_OPEN
template<> ::friendrpc::ErrType* Arena::CreateMaybeMessage<::friendrpc::ErrType>(Arena*);
template<> ::friendrpc::FriendListReq* Arena::CreateMaybeMessage<::friendrpc::FriendListReq>(Arena*);
template<> ::friendrpc::FriendListRes* Arena::CreateMaybeMessage<::friendrpc::FriendListRes>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace friendrpc {

// ===================================================================

class ErrType final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:friendrpc.ErrType) */ {
 public:
  inline ErrType() : ErrType(nullptr) {}
  ~ErrType() override;
  explicit PROTOBUF_CONSTEXPR ErrType(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ErrType(const ErrType& from);
  ErrType(ErrType&& from) noexcept
    : ErrType() {
    *this = ::std::move(from);
  }

  inline ErrType& operator=(const ErrType& from) {
    CopyFrom(from);
    return *this;
  }
  inline ErrType& operator=(ErrType&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ErrType& default_instance() {
    return *internal_default_instance();
  }
  static inline const ErrType* internal_default_instance() {
    return reinterpret_cast<const ErrType*>(
               &_ErrType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ErrType& a, ErrType& b) {
    a.Swap(&b);
  }
  inline void Swap(ErrType* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ErrType* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ErrType* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ErrType>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ErrType& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ErrType& from) {
    ErrType::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ErrType* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "friendrpc.ErrType";
  }
  protected:
  explicit ErrType(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrmsgFieldNumber = 2,
    kErrcodeFieldNumber = 1,
  };
  // bytes errmsg = 2;
  void clear_errmsg();
  const std::string& errmsg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_errmsg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_errmsg();
  PROTOBUF_NODISCARD std::string* release_errmsg();
  void set_allocated_errmsg(std::string* errmsg);
  private:
  const std::string& _internal_errmsg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_errmsg(const std::string& value);
  std::string* _internal_mutable_errmsg();
  public:

  // int32 errcode = 1;
  void clear_errcode();
  int32_t errcode() const;
  void set_errcode(int32_t value);
  private:
  int32_t _internal_errcode() const;
  void _internal_set_errcode(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:friendrpc.ErrType)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errmsg_;
    int32_t errcode_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_friend_2eproto;
};
// -------------------------------------------------------------------

class FriendListReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:friendrpc.FriendListReq) */ {
 public:
  inline FriendListReq() : FriendListReq(nullptr) {}
  ~FriendListReq() override;
  explicit PROTOBUF_CONSTEXPR FriendListReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FriendListReq(const FriendListReq& from);
  FriendListReq(FriendListReq&& from) noexcept
    : FriendListReq() {
    *this = ::std::move(from);
  }

  inline FriendListReq& operator=(const FriendListReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline FriendListReq& operator=(FriendListReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FriendListReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const FriendListReq* internal_default_instance() {
    return reinterpret_cast<const FriendListReq*>(
               &_FriendListReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FriendListReq& a, FriendListReq& b) {
    a.Swap(&b);
  }
  inline void Swap(FriendListReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FriendListReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FriendListReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FriendListReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FriendListReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FriendListReq& from) {
    FriendListReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FriendListReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "friendrpc.FriendListReq";
  }
  protected:
  explicit FriendListReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // bytes name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:friendrpc.FriendListReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_friend_2eproto;
};
// -------------------------------------------------------------------

class FriendListRes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:friendrpc.FriendListRes) */ {
 public:
  inline FriendListRes() : FriendListRes(nullptr) {}
  ~FriendListRes() override;
  explicit PROTOBUF_CONSTEXPR FriendListRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FriendListRes(const FriendListRes& from);
  FriendListRes(FriendListRes&& from) noexcept
    : FriendListRes() {
    *this = ::std::move(from);
  }

  inline FriendListRes& operator=(const FriendListRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline FriendListRes& operator=(FriendListRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FriendListRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const FriendListRes* internal_default_instance() {
    return reinterpret_cast<const FriendListRes*>(
               &_FriendListRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(FriendListRes& a, FriendListRes& b) {
    a.Swap(&b);
  }
  inline void Swap(FriendListRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FriendListRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FriendListRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FriendListRes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FriendListRes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FriendListRes& from) {
    FriendListRes::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FriendListRes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "friendrpc.FriendListRes";
  }
  protected:
  explicit FriendListRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFriendsFieldNumber = 2,
    kErrFieldNumber = 1,
  };
  // repeated bytes friends = 2;
  int friends_size() const;
  private:
  int _internal_friends_size() const;
  public:
  void clear_friends();
  const std::string& friends(int index) const;
  std::string* mutable_friends(int index);
  void set_friends(int index, const std::string& value);
  void set_friends(int index, std::string&& value);
  void set_friends(int index, const char* value);
  void set_friends(int index, const void* value, size_t size);
  std::string* add_friends();
  void add_friends(const std::string& value);
  void add_friends(std::string&& value);
  void add_friends(const char* value);
  void add_friends(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& friends() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_friends();
  private:
  const std::string& _internal_friends(int index) const;
  std::string* _internal_add_friends();
  public:

  // .friendrpc.ErrType err = 1;
  bool has_err() const;
  private:
  bool _internal_has_err() const;
  public:
  void clear_err();
  const ::friendrpc::ErrType& err() const;
  PROTOBUF_NODISCARD ::friendrpc::ErrType* release_err();
  ::friendrpc::ErrType* mutable_err();
  void set_allocated_err(::friendrpc::ErrType* err);
  private:
  const ::friendrpc::ErrType& _internal_err() const;
  ::friendrpc::ErrType* _internal_mutable_err();
  public:
  void unsafe_arena_set_allocated_err(
      ::friendrpc::ErrType* err);
  ::friendrpc::ErrType* unsafe_arena_release_err();

  // @@protoc_insertion_point(class_scope:friendrpc.FriendListRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> friends_;
    ::friendrpc::ErrType* err_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_friend_2eproto;
};
// ===================================================================

class FriendMethodRpc_Stub;

class FriendMethodRpc : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline FriendMethodRpc() {};
 public:
  virtual ~FriendMethodRpc();

  typedef FriendMethodRpc_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void friendlist(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::friendrpc::FriendListReq* request,
                       ::friendrpc::FriendListRes* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(FriendMethodRpc);
};

class FriendMethodRpc_Stub : public FriendMethodRpc {
 public:
  FriendMethodRpc_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  FriendMethodRpc_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~FriendMethodRpc_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements FriendMethodRpc ------------------------------------------

  void friendlist(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::friendrpc::FriendListReq* request,
                       ::friendrpc::FriendListRes* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(FriendMethodRpc_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ErrType

// int32 errcode = 1;
inline void ErrType::clear_errcode() {
  _impl_.errcode_ = 0;
}
inline int32_t ErrType::_internal_errcode() const {
  return _impl_.errcode_;
}
inline int32_t ErrType::errcode() const {
  // @@protoc_insertion_point(field_get:friendrpc.ErrType.errcode)
  return _internal_errcode();
}
inline void ErrType::_internal_set_errcode(int32_t value) {
  
  _impl_.errcode_ = value;
}
inline void ErrType::set_errcode(int32_t value) {
  _internal_set_errcode(value);
  // @@protoc_insertion_point(field_set:friendrpc.ErrType.errcode)
}

// bytes errmsg = 2;
inline void ErrType::clear_errmsg() {
  _impl_.errmsg_.ClearToEmpty();
}
inline const std::string& ErrType::errmsg() const {
  // @@protoc_insertion_point(field_get:friendrpc.ErrType.errmsg)
  return _internal_errmsg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ErrType::set_errmsg(ArgT0&& arg0, ArgT... args) {
 
 _impl_.errmsg_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:friendrpc.ErrType.errmsg)
}
inline std::string* ErrType::mutable_errmsg() {
  std::string* _s = _internal_mutable_errmsg();
  // @@protoc_insertion_point(field_mutable:friendrpc.ErrType.errmsg)
  return _s;
}
inline const std::string& ErrType::_internal_errmsg() const {
  return _impl_.errmsg_.Get();
}
inline void ErrType::_internal_set_errmsg(const std::string& value) {
  
  _impl_.errmsg_.Set(value, GetArenaForAllocation());
}
inline std::string* ErrType::_internal_mutable_errmsg() {
  
  return _impl_.errmsg_.Mutable(GetArenaForAllocation());
}
inline std::string* ErrType::release_errmsg() {
  // @@protoc_insertion_point(field_release:friendrpc.ErrType.errmsg)
  return _impl_.errmsg_.Release();
}
inline void ErrType::set_allocated_errmsg(std::string* errmsg) {
  if (errmsg != nullptr) {
    
  } else {
    
  }
  _impl_.errmsg_.SetAllocated(errmsg, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.errmsg_.IsDefault()) {
    _impl_.errmsg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:friendrpc.ErrType.errmsg)
}

// -------------------------------------------------------------------

// FriendListReq

// bytes name = 1;
inline void FriendListReq::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& FriendListReq::name() const {
  // @@protoc_insertion_point(field_get:friendrpc.FriendListReq.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FriendListReq::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:friendrpc.FriendListReq.name)
}
inline std::string* FriendListReq::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:friendrpc.FriendListReq.name)
  return _s;
}
inline const std::string& FriendListReq::_internal_name() const {
  return _impl_.name_.Get();
}
inline void FriendListReq::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* FriendListReq::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* FriendListReq::release_name() {
  // @@protoc_insertion_point(field_release:friendrpc.FriendListReq.name)
  return _impl_.name_.Release();
}
inline void FriendListReq::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:friendrpc.FriendListReq.name)
}

// -------------------------------------------------------------------

// FriendListRes

// .friendrpc.ErrType err = 1;
inline bool FriendListRes::_internal_has_err() const {
  return this != internal_default_instance() && _impl_.err_ != nullptr;
}
inline bool FriendListRes::has_err() const {
  return _internal_has_err();
}
inline void FriendListRes::clear_err() {
  if (GetArenaForAllocation() == nullptr && _impl_.err_ != nullptr) {
    delete _impl_.err_;
  }
  _impl_.err_ = nullptr;
}
inline const ::friendrpc::ErrType& FriendListRes::_internal_err() const {
  const ::friendrpc::ErrType* p = _impl_.err_;
  return p != nullptr ? *p : reinterpret_cast<const ::friendrpc::ErrType&>(
      ::friendrpc::_ErrType_default_instance_);
}
inline const ::friendrpc::ErrType& FriendListRes::err() const {
  // @@protoc_insertion_point(field_get:friendrpc.FriendListRes.err)
  return _internal_err();
}
inline void FriendListRes::unsafe_arena_set_allocated_err(
    ::friendrpc::ErrType* err) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.err_);
  }
  _impl_.err_ = err;
  if (err) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:friendrpc.FriendListRes.err)
}
inline ::friendrpc::ErrType* FriendListRes::release_err() {
  
  ::friendrpc::ErrType* temp = _impl_.err_;
  _impl_.err_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::friendrpc::ErrType* FriendListRes::unsafe_arena_release_err() {
  // @@protoc_insertion_point(field_release:friendrpc.FriendListRes.err)
  
  ::friendrpc::ErrType* temp = _impl_.err_;
  _impl_.err_ = nullptr;
  return temp;
}
inline ::friendrpc::ErrType* FriendListRes::_internal_mutable_err() {
  
  if (_impl_.err_ == nullptr) {
    auto* p = CreateMaybeMessage<::friendrpc::ErrType>(GetArenaForAllocation());
    _impl_.err_ = p;
  }
  return _impl_.err_;
}
inline ::friendrpc::ErrType* FriendListRes::mutable_err() {
  ::friendrpc::ErrType* _msg = _internal_mutable_err();
  // @@protoc_insertion_point(field_mutable:friendrpc.FriendListRes.err)
  return _msg;
}
inline void FriendListRes::set_allocated_err(::friendrpc::ErrType* err) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.err_;
  }
  if (err) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(err);
    if (message_arena != submessage_arena) {
      err = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, err, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.err_ = err;
  // @@protoc_insertion_point(field_set_allocated:friendrpc.FriendListRes.err)
}

// repeated bytes friends = 2;
inline int FriendListRes::_internal_friends_size() const {
  return _impl_.friends_.size();
}
inline int FriendListRes::friends_size() const {
  return _internal_friends_size();
}
inline void FriendListRes::clear_friends() {
  _impl_.friends_.Clear();
}
inline std::string* FriendListRes::add_friends() {
  std::string* _s = _internal_add_friends();
  // @@protoc_insertion_point(field_add_mutable:friendrpc.FriendListRes.friends)
  return _s;
}
inline const std::string& FriendListRes::_internal_friends(int index) const {
  return _impl_.friends_.Get(index);
}
inline const std::string& FriendListRes::friends(int index) const {
  // @@protoc_insertion_point(field_get:friendrpc.FriendListRes.friends)
  return _internal_friends(index);
}
inline std::string* FriendListRes::mutable_friends(int index) {
  // @@protoc_insertion_point(field_mutable:friendrpc.FriendListRes.friends)
  return _impl_.friends_.Mutable(index);
}
inline void FriendListRes::set_friends(int index, const std::string& value) {
  _impl_.friends_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:friendrpc.FriendListRes.friends)
}
inline void FriendListRes::set_friends(int index, std::string&& value) {
  _impl_.friends_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:friendrpc.FriendListRes.friends)
}
inline void FriendListRes::set_friends(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.friends_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:friendrpc.FriendListRes.friends)
}
inline void FriendListRes::set_friends(int index, const void* value, size_t size) {
  _impl_.friends_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:friendrpc.FriendListRes.friends)
}
inline std::string* FriendListRes::_internal_add_friends() {
  return _impl_.friends_.Add();
}
inline void FriendListRes::add_friends(const std::string& value) {
  _impl_.friends_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:friendrpc.FriendListRes.friends)
}
inline void FriendListRes::add_friends(std::string&& value) {
  _impl_.friends_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:friendrpc.FriendListRes.friends)
}
inline void FriendListRes::add_friends(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.friends_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:friendrpc.FriendListRes.friends)
}
inline void FriendListRes::add_friends(const void* value, size_t size) {
  _impl_.friends_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:friendrpc.FriendListRes.friends)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
FriendListRes::friends() const {
  // @@protoc_insertion_point(field_list:friendrpc.FriendListRes.friends)
  return _impl_.friends_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
FriendListRes::mutable_friends() {
  // @@protoc_insertion_point(field_mutable_list:friendrpc.FriendListRes.friends)
  return &_impl_.friends_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace friendrpc

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_friend_2eproto
